using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Numerics;

namespace ExamSolved
{
    [TestClass]
    public class TribonacciTests
    {
        [TestMethod]
        public void TribonacciTested()
        {
            Tribonacci tester = new Tribonacci();
            BigInteger a = BigInteger.Parse("162465333342829157477956411156360890421888128553986162907523498501302092889240384073072237132670200868103711192541153732106929511584315384141074745507600708413840133003034428978817030019299365776621225062521234625477920586695390585974914569622364494262668232225091543968969762378621228269893681480291761392039022542771645140349845518968601262633990087113");
            BigInteger b = BigInteger.Parse("338020957194572585323785929057407445745899523141335575919257541767173855595432099273550303104817174934459551273538766359965367749250874422240428568160397024510344348558304228927595894938574478634231194545957715464109597988880043939874807487392270328737358571111712258399500822099235074095611221511291599223542844493353732635945056138196060418743425260423494681610605116876862150700303382163529870527788119116977875927612544211729927136712766303818572266907819641184694564768971609995587518404929225400840869972244164076383823477152481037827649844472001738989756699114327445286218189514532612463804888465971467906082983108078810178763664959600292841727034965073703848053811334246270946512861351435287705523648533921009226374368914099433984097981997484486086017031959618858877330312777204993805606185565479262743477151843676372988854871365593232173192387537205849138475409175451323967896223721479044211909939069497136610042470916405210516729707067080609418780433958420497697928946523589891472879486659796913589730905249098828139855938429436495941628432110685881062619680182625421427679858229785360788373817076438706434676582013315897910997248322616487842947580828161775516710038649326231015614646048562903896558307562903692895687558293631740239785468332134933474213195732966022671692488785554888238287216589086698708823711770283111262090905099322732441409928910083670954319308530728325815244029300617627336431423874238161710303875354924951807824540958758729682111781940082982948530212976856422841877697700401387996207205996192882625907444562626831835844260263989862399148397694681879336215368971225835968801606322399305180470944411272141087193782201937553743516257713755225589755668861360529463200281345788403878106844400067060079179575787393909039313065284308866626775922514761855109890392401291749966966851988944607419418022106040560322741968542224277213452291600852353514447327884973517068149987380608503942775329161389528503245309669305486850910429444840745275105383707641025822504660441606940090479826765059295841391575491344621128746970517632428307831260098450534415185874416874272364611865081030887317271843803549594694556001950958855912112250034035425280309623822695874999711247769272093044470418506008715283624671891064948227877022748441034323575435922110348213764518846174374311030067908349270790198984702303196911349701660446640249317880667581671243229538433954356084269927074117123125662176783229727667822117263390186557602613039340925295558303509217260198710663647815250713132257253825845379846506178703141417128595821575598244185511063769036276814540420721531983308887613419541933525588772378747186367975795697675106618893746007548478810");
            BigInteger c = BigInteger.Parse("739417304382800583686753957739063720591067380857799219261378446520343624568218473645111050389820411184256816813337956314981211630252226005829296300434688072717149804913848233002270843736094373928174267085526083594134741600828768310313150806561200427095075693435495613447591755370919372802185956926221614749815113634101955883797245411666311036967921712759951725064517594270027048648970058382097557665258487976764286228983810793904001341693219323522119872860158217022011049069202041641064111508783789226844572463085212209493979838921758364225653445398885831802248910930445790132617533872977849603408051466809660245357611304620087832348168587768171014488486181319549934021089856698843138149122512478845848064614438409124851045211283381296647262253455732360068682300846867999409565540691703805976106125013993877968691486176296837628990988126187380386278698959999666556769442886479393024719703861284662792932656328501448611479554178487596435261609522580906887017850400828106291589119226665243086792374700166260892442235887635065462503909386047070507643086365953218179775575449979704528481490924229505572987198131415342415493752695832087161670516958877140263730490991164607541288120328404119252370403630334853709749495882262645257577908666230651967353237366572989264561300777277409394179184343801178190912583472309614196879269784684885002580361606469577612421630229193808220122530178295164984665394211891562545790776129199573079365040911523638835950121815808502358417216750328092591654823275399630697313325014357976298213358834520013700476202786240772351639107541441111886879051840389504152184564279179269361591022778363280031597176197305107004139451079907874392326448007513645424074030211660817762482059137837851996118070120095093252817483733721779656511816879498729091809147385095144492410756713563044663236651784470154106836059802478617172374295759418780186121397920149346065155813259602652470107949967179065958452041527031881780000779579955197985234560636582532911462387611443658334761519073975171149636208527182983286983654042117453210504622946921510256975138955720821276354123705714608695286883356448658626504690081254105510764165776369138565513344010161057989840575483176116752380498997836715617065266003259599213130706420948072521943222468091037930417380256542408318894479729372078719985665531111523063695939371106829082863478053793835168881745375769306675233897628605356565531750374418576587321338807155624868594845126040724917831438516409713940684306023680583323807012068147371201749070175468403941031565182251117233929996513534978551501148438694294281863628247713652341778461464598103567024564717188124053721642424764879149934400348695551455");
            BigInteger d = BigInteger.Parse("-2612985663693170606904780132106318059754190262066188657044180383253752897802632783274929889318858071158315721861746582571596405150310297353283512426497867582686155063061108412874410050936481891147031107220058097942376931628663824533573594898086081727571430988454419340388644340646853229991244709471272509094651984613854953965042243589786098201871405038530447548545859313439245235649979431781333636079262736290183641158123702415002182061805819261966779751330170509370396431767821806977389420460760934132825214429826507933196626796128204948969661200085985943055895265901319587192336350012829331605484605887174265293361687378278619226970846852510185778238120134393190572653968227717358620532855835947281702289152136233352038569719697947753882846669854406724187439519528305277986437605512164876162003680732891536979312410805049073778864982427274617644426658872837725997626962973989092095741872827417290593740596115138982022421989817210208083090292980716545911390557664088527372390058729918809441304456807275990598131713063916893731200082331882808405644214215209669104420422828408581815913755654923965327087555138294390220659795564765880115682907616405244989216361411079289705623070724942033965905554833062783117146265386734883180740953469824017248955211244199530658615778886059385176042507625645371335872093215035076779475198577835757509683717793059179126510450910818860159241471071904498956913526681257515214352378408923551706065533301989723293824621398729932582878861734869830965649742060678187771892517598217383206950819838231931563311312563672013084078458318369981808635018095795331097588177899508004014354919678102359312431464170900470130583577725786621178647405171651759862807606932510191635123107225167554536857897633600895195048698155730510008174020693376209498293706605183918542957688141730959684125844408293046007973947307381921528259271065738480921113803351851702879469738480091303631527686422601183534992339612028553559308222863333622446445188950366365793938741375445721737503655650101945017430450971621656783820412435038262482738746039237324991449579153524623102193752695303506316287227925241066270094664559498655553091258558208803272408717549689109973571805210034037033251041408640888084234322781403102612666388367526779143331982246899872864752561533065852598580337594351194519566976495974589673511903144637967305291181647406724124684057141831047907042095212467321479256735596829429514116231799874028565582333248669560476517049664134592812235265881630626794551441546993803070659254500694632942929826184529233782640297422289149770420175659976424947489716165177608093667955556995665261514428674567456402605519676612179892769944190365428533627268757021431378766586352713202658317901094888887919571358461634659530845754038682607792577823020392579056684812346953312289713013881273317414534892840762008711821645390517286538247168951441395144028196106407275730176452626042744093291356890213396734595929145560614010341023332683105193930944845475195574126973391909442911420849987346315884571237169985206809924321877804791287363920288184447745058901610092490106217544009052385446502147808048764275402003753202542316081134189164146991660540613948414555489169618182145784410540198696516065678748429166252157412338085120841247880694700556556681833609356936500008032565138460968543322510040860808376586468577401453997973332073469711573631503436534806460549364476944149060495421931321934539480631446153768252259150737703588566754816618564438503846489897318106733543583650263822319387912492907005602593848471014238275499914718838080429824560571012035654827831956722169040693175323736936518733845356906073092897281207032077497293922252903254357129313964875060279569610703705916380078562838970585417908772908132127210257204211782418338511691805016425723286222217822372620506341753204521736245566025212127390728645307117407573171264107320593483817095930540232839890658906015596310856205273245926034742424867086951616626041822694183442668325261075448022524078771251393787509707646000000000");
            BigInteger e = BigInteger.Parse("1555570099347690735618718629048258218258677242431143620123717842494717544569171098151644013809840826988188805734695383608071397722263406116778996940768061315990792407182615785774806233331667738726232274470019572897410708157467525634836813426591424654847524815638967201801055935133549173950177728359392874797140958127450420394981246228578804973849565436931829401605956807934861616707261229685313279601145460391343469345279904589244001262851043350876403916546650843141397456063085805627303183794234928371102350291367088310267792428300236862447303179566463451990725876095571284591408706514593185762836958941459884488520868395747073297037860983085061860390535157546582781618264641221401826814865074305572809805345845033039127040000842114831368376724212078132863741174205287756423624724624312271219665369022866875920799138781278974788736074600862129536830440786790744764512859396079545045641891773227337196428488744864596705800246504134368905195386641019816123033264207868969843561180316910919611565183741611582001541717101895213132537960866363725070851985900343046418200871240425073423285404593870188618414751132715814042614746523476419686350459405553117808733224398363637853609333479855277307676861170518102806700137762463439184992328151331924774302024129701980624966455956826233906728776220913879837811898496935934131986898951467701653900420922958909209270642318406581563571735287781538030167071302898144202580237704858284083407344567344896978391660129874474493036400820000229474890546087678367695204603170091478357178755335128638268789843600173082045450009277849864776478777021089554960353147253604205039597876076234425347839126197107228741756618548192420561538295613489404433179090227740137045402861223396911329742177282673688933219741864952224203606766902896454187071166491943513757211240424824633409267395592162175603592562763604721976244859027037645681140035781721076941016336762671154390668316001237049092005255118739955523755159551854281752386984052014725564598458974067939714989881478313018409667601426623526285660955057745475509021543010098040769876553267662398309427711142318306528710803241039197899647395107345978914209795177731652919484071826688568375842511656491373134261808095155342582603622264904512894844885784582413125856102209213667524960212621457040599344904093103279601878255966201328993618575794208932832673615960491873908139217248160819613593400144557277412420626945617992344599645201850540513012660149723755641587608667699951904776057297604972011610760616538372015859086544818590024707315189390096302848889293176000077230188191765436188360799643928004309733649832130476417284077793860195386506351057152358718547487923753499195591758631127889620826071751521725111768063747238174990333792623500090429315684621428294912524987012360417527771037386195552831541450005699811758817793133004862208368035974780249488816762001469668306695480988011367246904071675474796265132995668261173786786477184830462565033464499670237708569847470119387694649608569884181071109292307978692321940996398588528187633529006436875871383616518380817080086828111260909460269548003458075732264068927820732820322779833210157984624218513437938562975380145026335819004359798262724386905517511262473360334390559753665066143923766777128734480198998158774675874889542995401148815677149606849548189144548829715024753032761073061837420992782495806266826856247546503863151713808907315038889617241859129465408625585164158872890089716163891264728152839302779478398443821117299811202035671108309289053165541214046595027670905727264934408127635573137630184861700626289211992474508089681701479362911161722576216940909471377725728714039618063232126110636410540218854775418076044632448918394550053316340193901668652019328737806497505278241837016051299786853935466647136986398861635527244210983686447989593399245186930481141253582889049773502807663892148679758588276580798085071953321497052623303368646864127022971317695008805475666777698336383310266519380430035333907801388193754801604966565573670772253846");
            BigInteger result = tester.TribonacciSolved(1, 2, 3, 10);
            Assert.AreEqual(230, result);

            result = tester.TribonacciSolved(-5, 10, -50, 15);
            Assert.AreEqual(-41090, result);

            result = tester.TribonacciSolved(1337, 1234, 4321, 11);
            Assert.AreEqual(492741, result);

            result = tester.TribonacciSolved(9684, 37463, 238428, 3);
            Assert.AreEqual(238428, result);

            result = tester.TribonacciSolved(78373, 23823463, -349573497, 20);
            Assert.AreEqual(-6430239334253, result);

            result = tester.TribonacciSolved(1, 1, 1, 1337);
            Assert.AreEqual(a, result);

            result = tester.TribonacciSolved(10, 100, 1000, 10000);
            Assert.AreEqual(b, result);

            result = tester.TribonacciSolved(1, 1, 1, 10000);
            Assert.AreEqual(c, result);

            result = tester.TribonacciSolved(-2000000000, -2000000000, -2000000000, 15000);
            Assert.AreEqual(d, result);

            result = tester.TribonacciSolved(1234567890, 987654321, 1337133713, 15000);
            Assert.AreEqual(e, result);
        }
    }
}
